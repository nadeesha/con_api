<%

var pipe = require('pipe');
var log = new Log();
var router = require('/extensions/universal/simpleRouter.js');
var errHandler = require('/extensions/universal/simpleErrorHandler.js');
errHandler.environment = 'dev';

// Routers
var conferenceRouter = require('/routes/conferenceRouter.js');
var sponsorRouter = require('/routes/sponsorRouter.js');
var boothRouter = require('/routes/boothRouter.js');

response.addHeader('Access-Control-Allow-Origin', '*');
response.addHeader('Access-Control-Allow-Methods',
	'HEAD, GET, POST, PUT, DELETE, OPTIONS');
response.addHeader('Access-Control-Allow-Headers',
	'Content-Type, X-Requested-With, Origin, Accept, Authorization, ' +
	'Content-Range, Content-Disposition, Content-Description');
response.addHeader('Access-Control-Allow-Credentials', 'true');

// this is a hack until simpleRouter comes to support options
if (request.getMethod() === 'OPTIONS') {
	response.status = 200;
} else {
	pipe.pipes.plug(require('/extensions/universal/simpleTenantParser.js'));
	pipe.pipes.plug(router);
	pipe.pipes.plug(errHandler);

	// Default Route
	router.app.get('/', function() {
		response.status = 200;
	});

	// Conference Routes
	router.app.post('/:context/conferences', conferenceRouter.postConference);
	router.app.put('/:context/conferences/:id', conferenceRouter.putConference);
	router.app.get('/:context/conferences/:id', conferenceRouter.getConference);
	router.app.get('/:context/conferences', conferenceRouter.getAllConferences);
	router.app.get('/:context/conferences/status/:status', conferenceRouter.getActiveConferences);

	// Sponsor Routes
	router.app.post('/:context/sponsors', sponsorRouter.postSponsor);
	router.app.put('/:context/sponsors/:id/', sponsorRouter.putSponsor);
	router.app.get('/:context/sponsors/:id', sponsorRouter.getSponsor);
	router.app.get('/:context/sponsors', sponsorRouter.getAllSponsors);
	router.app.get('/:context/sponsors/status/:status', sponsorRouter.getAllActiveSponsors);
	router.app.get('/:context/sponsors/confId/:confId', sponsorRouter.getAllActiveSponsorsByConference);

	// Booth Router
	router.app.post('/:context/booths', boothRouter.postBooth);
	router.app.put('/:context/booths/:id', boothRouter.putBooth);
	router.app.get('/:context/booths/:id', boothRouter.getBooth);
	router.app.get('/:context/booths', boothRouter.getAllBooths);
	router.app.get('/:context/booths/status/:status', boothRouter.getAllActiveBooths);
	router.app.get('/:context/booths/confId/:confId', boothRouter.getAllActiveBoothByConference);

	pipe.pipes.handle(request, response, session);
}

%>